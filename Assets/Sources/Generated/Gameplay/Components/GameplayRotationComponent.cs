//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public DuckOfDoom.Danmaku.RotationComponent rotation { get { return (DuckOfDoom.Danmaku.RotationComponent)GetComponent(GameplayComponentsLookup.Rotation); } }
    public bool hasRotation { get { return HasComponent(GameplayComponentsLookup.Rotation); } }

    public void AddRotation(float newAngle) {
        var index = GameplayComponentsLookup.Rotation;
        var component = CreateComponent<DuckOfDoom.Danmaku.RotationComponent>(index);
        component.Angle = newAngle;
        AddComponent(index, component);
    }

    public void ReplaceRotation(float newAngle) {
        var index = GameplayComponentsLookup.Rotation;
        var component = CreateComponent<DuckOfDoom.Danmaku.RotationComponent>(index);
        component.Angle = newAngle;
        ReplaceComponent(index, component);
    }

    public void RemoveRotation() {
        RemoveComponent(GameplayComponentsLookup.Rotation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherRotation;

    public static Entitas.IMatcher<GameplayEntity> Rotation {
        get {
            if (_matcherRotation == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.Rotation);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherRotation = matcher;
            }

            return _matcherRotation;
        }
    }
}
