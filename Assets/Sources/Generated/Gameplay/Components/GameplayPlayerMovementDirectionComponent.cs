//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayContext {

    public GameplayEntity playerMovementDirectionEntity { get { return GetGroup(GameplayMatcher.WispMovementDelta).GetSingleEntity(); } }
    public DuckOfDoom.Danmaku.WispMovementDelta WispMovementDirection { get { return playerMovementDirectionEntity.WispMovementDirection; } }
    public bool hasPlayerMovementDirection { get { return playerMovementDirectionEntity != null; } }

    public GameplayEntity SetPlayerMovementDirection(UnityEngine.Vector2 newDirection) {
        if (hasPlayerMovementDirection) {
            throw new Entitas.EntitasException("Could not set PlayerMovementDirection!\n" + this + " already has an entity with DuckOfDoom.Danmaku.PlayerMovementDirectionComponent!",
                "You should check if the context already has a playerMovementDirectionEntity before setting it or use context.ReplacePlayerMovementDirection().");
        }
        var entity = CreateEntity();
        entity.AddPlayerMovementDirection(newDirection);
        return entity;
    }

    public void ReplacePlayerMovementDirection(UnityEngine.Vector2 newDirection) {
        var entity = playerMovementDirectionEntity;
        if (entity == null) {
            entity = SetPlayerMovementDirection(newDirection);
        } else {
            entity.ReplaceMovementDelta(newDirection);
        }
    }

    public void RemovePlayerMovementDirection() {
        playerMovementDirectionEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public DuckOfDoom.Danmaku.WispMovementDelta WispMovementDirection { get { return (DuckOfDoom.Danmaku.WispMovementDelta)GetComponent(GameplayComponentsLookup.PlayerMovementDirection); } }
    public bool hasPlayerMovementDirection { get { return HasComponent(GameplayComponentsLookup.PlayerMovementDirection); } }

    public void AddPlayerMovementDirection(UnityEngine.Vector2 newDirection) {
        var index = GameplayComponentsLookup.PlayerMovementDirection;
        var component = CreateComponent<DuckOfDoom.Danmaku.WispMovementDelta>(index);
        component.Delta = newDirection;
        AddComponent(index, component);
    }

    public void ReplaceMovementDelta(UnityEngine.Vector2 newDirection) {
        var index = GameplayComponentsLookup.PlayerMovementDirection;
        var component = CreateComponent<DuckOfDoom.Danmaku.WispMovementDelta>(index);
        component.Delta = newDirection;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerMovementDirection() {
        RemoveComponent(GameplayComponentsLookup.PlayerMovementDirection);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherPlayerMovementDirection;

    public static Entitas.IMatcher<GameplayEntity> WispMovementDelta {
        get {
            if (_matcherPlayerMovementDirection == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.PlayerMovementDirection);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherPlayerMovementDirection = matcher;
            }

            return _matcherPlayerMovementDirection;
        }
    }
}
